import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.enums import ContentType

from db.models.users import Users
from utils.anime_search import search_anime

logger = logging.getLogger(__name__)
router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):

    user = message.from_user
    db_user = await Users.get_or_none(uid=user.id)
    
    if not db_user:
        await Users.create(
            uid=user.id,
            username=user.username
        )
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} (@{user.username})")
    
    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø AniSearch Bot</b>\n\n"
        
        "üîç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –∞–Ω–∏–º–µ, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ\n"
        "‚Ä¢ –ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞\n"
        "‚Ä¢ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ü–µ–Ω—ã\n\n"
        
        "üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ!"
    )


@router.message(F.content_type == ContentType.PHOTO)
async def handle_photo(message: Message):

    await Users.filter(uid=message.from_user.id).update(last_active=message.date)
    
    user = await Users.get(uid=message.from_user.id)
    if user.is_blocked:
        await message.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ")
        return
    
    status_msg = await message.answer(
        "üîç –ò—â—É –∞–Ω–∏–º–µ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é..."
    )
    
    try:
        photo = message.photo[-2] if len(message.photo) > 1 else message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        
        if file.file_size and file.file_size > 20 * 1024 * 1024:
            await status_msg.edit_text(
                "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
            )
            return
        
        file_bytes = await message.bot.download_file(file.file_path)
        results = await search_anime(file_bytes.read())
        
        if not results:
            await status_msg.edit_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ –∞–Ω–∏–º–µ.\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ\n"
                "‚Ä¢ –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–∞\n"
                "‚Ä¢ –ê–Ω–∏–º–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ\n\n"
                
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–¥—Ä!"
            )
            return
        
        best_match = results[0]
        similarity = round(best_match['similarity'] * 100, 2)
        
        anime_info = best_match.get('anilist', {})
        title = anime_info.get('title', {})
        
        anime_name = (
            title.get('native') or 
            title.get('romaji') or 
            title.get('english') or 
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ'
        )
        
        episode = best_match.get('episode', '?')
        time_from = best_match.get('from', 0)
        time_to = best_match.get('to', 0)
        
        def seconds_to_time(seconds):
            mins = int(seconds // 60)
            secs = int(seconds % 60)
            return f"{mins:02d}:{secs:02d}"
        
        time_str = f"{seconds_to_time(time_from)} - {seconds_to_time(time_to)}"
        
        response_text = (
            f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ!</b>\n\n"
            f"üì∫ <b>–ê–Ω–∏–º–µ:</b> {anime_name}\n"
            f"üìº <b>–≠–ø–∏–∑–æ–¥:</b> {episode}\n"
            f"‚è± <b>–í—Ä–µ–º—è:</b> {time_str}\n"
            f"üéØ <b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {similarity}%"
        )
        
        if anime_info.get('id'):
            response_text += f"\n\nüîó <a href='https://anilist.co/anime/{anime_info['id']}'>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ AniList</a>"
        
        await status_msg.edit_text(response_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∏–º–µ: {e}")
        await status_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )